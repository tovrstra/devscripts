#!/usr/bin/env python

from __future__ import print_function

from fnmatch import fnmatch
from glob import glob
import os
import shutil
import sys


class Program(object):
    def __init__(self, colwidth=15):
        self.colwidth = colwidth
        self.active = False
        if os.path.isfile('HEADER'):
            with open('HEADER') as f:
                self.header_lines = f.readlines()
        else:
            self.header_lines = None

    def main(self):
        self.remove_from_gitignore()
        self.clean_walker()
        if self.active:
            sys.exit(-1)

    def report(self, action, command):
        self.active = True
        print(action.ljust(self.colwidth), command)

    def clean_walker(self):
        patterns = [
            ('HEADER', 'f', [self.fix_whitespace]),
            ('scripts/*', 'f', [self.fix_python, self.fix_whitespace]),
            ('*/.git', 'd', [self.ignore]),
            ('*/data', 'd', [self.ignore]),
            ('*/examples/*.py', 'f', [self.fix_whitespace]),
            ('*.bak', 'f', [self.remove]),
            ('*README*', 'f', [self.fix_whitespace]),
            ('*LICENSE*', 'f', [self.fix_whitespace]),
            ('*COPYING*', 'f', [self.fix_whitespace]),
            ('*.rst', 'f', [self.fix_rst, self.fix_whitespace]),
            ('*.rst.template', 'f', [self.fix_rst, self.fix_whitespace]),
            ('*/CMakeLists.txt', 'f', [self.fix_python, self.fix_whitespace]),
            ('*.txt', 'f', [self.fix_whitespace]),
            ('*.py', 'f', [self.fix_python, self.fix_whitespace]),
            ('*.pyc', 'f', [self.remove]),
            ('*.pyo', 'f', [self.remove]),
            ('*.pyx', 'f', [self.fix_python, self.fix_whitespace]),
            ('*.pxd', 'f', [self.fix_python, self.fix_whitespace]),
            ('*.c', 'f', [self.remove_if_cython]),
            ('*.cpp', 'f', [self.remove_if_cython]),
            ('*.c', 'f', [self.fix_c, self.fix_whitespace]),
            ('*.cpp', 'f', [self.fix_c, self.fix_whitespace]),
            ('*.h', 'f', [self.fix_c, self.fix_whitespace]),
            ('*.h.in', 'f', [self.fix_c, self.fix_whitespace]),
            ('*.so', 'f', [self.remove]),
            ('*.yml', 'f', [self.fix_whitespace]),
            ('*.yaml', 'f', [self.fix_whitespace]),
            ('*.in', 'f', [self.fix_whitespace]),
            ('.gitignore', 'f', [self.fix_whitespace]),
        ]

        for dn, subdns, fns in os.walk('.'):
            # Apply fixes to files
            for fn in fns:
                path = os.path.join(dn, fn)
                for pattern, kind, actions in patterns:
                    if 'f' in kind and fnmatch(path, pattern):
                        stop = True
                        for action in actions:
                            reply = action(path)
                            if reply == 'continue':
                                stop = False
                        if stop:
                            break

            # Apply fixes to directories, optionally removing some from the list.
            for subdn in subdns[:]:
                path = os.path.join(dn, subdn)
                descend = True
                for pattern, kind, actions in patterns:
                    if 'd' in kind and fnmatch(path, pattern):
                        stop = True
                        for action in actions:
                            reply = action(path)
                            if reply == 'skip':
                                descend = False
                            elif reply == 'continue':
                                stop = False
                        if stop:
                            break
                if not descend:
                    subdns.remove(subdn)

    def remove(self, path):
        self.report('REMOVE', path)
        if os.path.isdir(path):
            shutil.rmtree(path)
        else:
            os.remove(path)
        return 'skip'

    def ignore(self, path):
        return 'skip'

    def remove_if_cython(self, path):
        # chop extension and add pyx
        path_pyx = path[:path.rfind('.')] + '.pyx'
        if os.path.isfile(path_pyx):
            self.report('REMOVE', path)
            os.remove(path)
        else:
            return 'continue'

    def fix_python(self, path):
        self.conditional_rewrite(path, self.fix_python_lines)

    def fix_c(self, path):
        self.conditional_rewrite(path, self.fix_c_lines)

    def fix_rst(self, path):
        self.conditional_rewrite(path, self.fix_rst_lines)

    def fix_whitespace(self, path):
        self.conditional_rewrite(path, self.fix_whitespace_lines)

    def conditional_rewrite(self, path, fix_lines):
        with open(path) as f:
            orig_lines = f.readlines()
            lines = orig_lines[:]
        fix_lines(lines)
        if lines != orig_lines:
            self.report(fix_lines.__doc__, path)
            with open(path, 'w') as f:
                f.writelines(lines)

    def fix_python_lines(self, lines):
        """HEADER PYTHON"""
        if self.header_lines is None:
            return
        # check for an exception line
        for line in lines:
            if 'nofixheader' in line:
                return
        # check if a shebang is present
        do_shebang = lines[0].startswith('#!')
        # remove the current header
        self.strip_header(lines, ['# --\n', '#--\n'])
        # add new header (insert must be in reverse order)
        for hline in self.header_lines[::-1]:
            lines.insert(0, ('# ' + hline).strip() + '\n')
        # add a source code encoding line
        lines.insert(0, '# -*- coding: utf-8 -*-\n')
        if do_shebang:
            lines.insert(0, '#!/usr/bin/env python\n')

    def fix_c_lines(self, lines):
        """HEADER C"""
        if self.header_lines is None:
            return
        # check for an exception line
        for line in lines:
            if 'no_update_headers' in line:
                return
        # remove the current header
        self.strip_header(lines, ['// --\n', '//--\n'])
        # add new header (insert must be in reverse order)
        for hline in self.header_lines[::-1]:
            lines.insert(0, ('// ' + hline).strip() + '\n')

    def fix_rst_lines(self, lines):
        """HEADER RST"""
        if self.header_lines is None:
            return
        # check for an exception line
        for line in lines:
            if 'no_update_headers' in line:
                return
        # remove the current header
        self.strip_header(lines, ['    : --\n'])
        # add an empty line after header if needed
        if len(lines[1].strip()) > 0:
          lines.insert(1, '\n')
        # add new header (insert must be in reverse order)
        for hline in self.header_lines[::-1]:
            lines.insert(0, ('    : ' + hline).rstrip() + '\n')
        # add comment instruction
        lines.insert(0, '..\n')

    def strip_header(self, lines, closings):
        # search for the header closing line, e.g. '# --'
        counter = 0
        found = 0
        for line in lines:
            counter += 1
            if line in closings:
                found = 1
                break
        if found:
            del lines[:counter]
            # If the header closing is not found, no headers are removed
        # add a header closing line
        lines.insert(0, closings[0])

    def fix_whitespace_lines(self, lines):
        """WHITESPACE"""
        for iline, line in enumerate(lines):
            lines[iline] = line.replace('\t', '    ').rstrip() + '\n'
        while len(lines) > 0 and lines[-1] == '\n':
            del lines[-1]

    def remove_from_gitignore(self):
        for dn, subdns, fns in os.walk('.'):
            subdns = [subdn for subdn in subdns if subdn != '.git']
            for fn in fns:
                if fn == '.gitignore':
                    with open(fn) as f:
                        for line in f:
                            line = line[:line.find('#')].strip()
                            if len(line) > 0:
                                self.remove_glob_recursive(dn, line)

    def remove_glob_recursive(self, root, pattern):
        for dn, subdns, fns in os.walk(root):
            subdns = [subdn for subdn in subdns if subdn != '.git']
            for path in glob(os.path.join(root, dn, pattern)):
                self.remove(os.path.normpath(path))


if __name__ == '__main__':
    Program().main()
